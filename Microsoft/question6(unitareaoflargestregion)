// { Driver Code Starts
#include<bits/stdc++.h>
using namespace std;

 // } Driver Code Ends
class Solution
{
    public:
 
   
void helper(vector<vector<int>>&grid,vector<vector<bool>>&visited,int i,int j,int n,int m,int &count)
    {
       
       
        if(i<0||i>=n||j<0||j>=m||grid[i][j]==0||visited[i][j]==true)
        {
            return  ;
            
        }
         
        visited[i][j]=true;
        count++;
        
        int dx[8]={1,-1,0,0,1,-1,-1,1};
        int dy[8]={0,0,1,-1,1,-1,1,-1};
helper(grid,visited,i+dx[0],j+dy[0],n,m,count);
helper(grid,visited,i+dx[1],j+dy[1],n,m,count);
helper(grid,visited,i+dx[2],j+dy[2],n,m,count);
helper(grid,visited,i+dx[3],j+dy[3],n,m,count);
helper(grid,visited,i+dx[4],j+dy[4],n,m,count);
helper(grid,visited,i+dx[5],j+dy[5],n,m,count);
helper(grid,visited,i+dx[6],j+dy[6],n,m,count);
helper(grid,visited,i+dx[7],j+dy[7],n,m,count);
      
        
        
    }
    //Function to find unit area of the largest region of 1s.
    int findMaxArea(vector<vector<int>>& grid)
    {

int maxregion=0;
int n=grid.size();
int  m=grid[0].size();
vector<vector<bool>>visited(n,vector<bool>(m,false));
for(int i=0;i<n;i++)
{
    for(int j=0;j<m;j++)
    {
        if(grid[i][j]==1)
        {
            int count=0;
           helper(grid,visited,i,j,n,m,count);
           
            maxregion=max(maxregion,count);
        }
    }
    
}
 return maxregion;
    }
};

// { Driver Code Starts.
int main(){
	int tc;
	cin >> tc;
	while(tc--){
		int n, m;
		cin >> n >> m;
		vector<vector<int>>grid(n, vector<int>(m, -1));
		for(int i = 0; i < n; i++){
			for(int j = 0; j < m; j++){
				cin >> grid[i][j];
			}
		}
		Solution obj;
		int ans = obj.findMaxArea(grid);
		cout << ans << "\n";
	}
	return 0;
}  // } Driver Code Ends