// { Driver Code Starts
#include<bits/stdc++.h>
using namespace std;

 // } Driver Code Ends
class Solution {
public:
bool check(int i,vector<int>&visited,vector<int>&dfsvisited,vector<int>adj[])
{
    visited[i]=1;
    dfsvisited[i]=1;
    for(auto it:adj[i])
    {
        if(!visited[it])
        {
            if(check(it,visited,dfsvisited,adj)==true)
            return true;
            
        }
        else if(dfsvisited[it])
        return true;
    }
    
dfsvisited[i]=0;
    return false;
}
	bool isPossible(int N, vector<pair<int, int> >& prerequisites) {
	   int n=prerequisites.size();
	   vector<int>adj[N];
	   for(int i=0;i<n;i++)
	   {
	       adj[prerequisites[i].second].push_back(prerequisites[i].first);
	      
	       
	   }
	   vector<int>visited(N+1,0);
	   vector<int>dfsvisited(N+1,0);
	  
	   for(int i=0;i<N;i++)
	   {
	       if(!visited[i])
	       {
	           if(check(i,visited,dfsvisited,adj)==true)
	           return false;
	       }
	   }
	   return true;
	  
	   
	}
};

// { Driver Code Starts.
int main(){
	int tc;
	cin >> tc;
	while(tc--){
    	int N, P;
        vector<pair<int, int> > prerequisites;
        cin >> N;
        cin >> P;
        for (int i = 0; i < P; ++i) {
            int x, y;
            cin >> x >> y;
            prerequisites.push_back(make_pair(x, y));
        }
        // string s;
        // cin>>s;
        Solution ob;
        if (ob.isPossible(N, prerequisites))
            cout << "Yes";
        else
            cout << "No";
        cout << endl;
	}
	return 0;
}  // } Driver Code Ends