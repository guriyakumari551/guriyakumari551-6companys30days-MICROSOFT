// { Driver Code Starts
#include<bits/stdc++.h>
using namespace std;

 // } Driver Code Ends
class Solution
{
	public:
    //Function to find if the given edge is a bridge in graph.
void dfs(int node,int par,vector<int>&lowtime,vector<int>&intime,vector<int>adj[],int V,vector<vector<int>>&ans,int timer,vector<bool>&visited)
{

visited[node]=true;
intime[node]=timer;
lowtime[node]=timer;
timer++;
for(auto child:adj[node])
{
    if(child==par)
    continue;
    if(visited[child]==true)
    {
        //it is a back edge which is the ancestor of the current node
        lowtime[node]=min(lowtime[node],intime[child]);
    }
    else
    {
        //it is a forward edge
        //we have to make dfs in forward directions
        dfs(child,node,lowtime,intime,adj,V,ans,timer,visited);
        if(lowtime[child]>intime[node])
        {
            ans.push_back({child,node});
        }
        lowtime[node]=min(lowtime[node],lowtime[child]);
    }
}
}
    int isBridge(int V, vector<int> adj[], int c, int d) 
    {
       
       vector<vector<int>>ans;
       int timer=0;
       vector<int>lowtime(V);
       vector<int>intime(V);
       vector<bool>visited(V);
       dfs(0,-1,lowtime,intime,adj,V,ans,timer,visited);
       for(int i=0;i<ans.size();i++)
       {
           int x=ans[i][0];
           int y=ans[i][1];
           if(x==c&&y==d||x==d&&y==c)
           return 1;
       }
     return 0;  
    }
};

// { Driver Code Starts.


int main()
{
    int t;
    cin >> t;
    while (t--) {
        int V, E;
        cin >> V >> E;
        vector<int> adj[V];
        int i=0;
        while (i++<E) {
            int u, v;
            cin >> u >> v;
            adj[u].push_back (v);
            adj[v].push_back (u);
        }
        
        int c,d;
        cin>>c>>d;
        
        Solution obj;
    	cout << obj.isBridge(V, adj, c, d) << "\n";
    }

    return 0;
}

  // } Driver Code Ends